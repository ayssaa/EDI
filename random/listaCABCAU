// Implementando Lista com CabeC'a e Cauda
# include <stdio.h>
# include <stdlib.h>

typedef struct noLista {
	int info;
	struct noLista *prox;
} NoLista;

typedef struct lista {
	NoLista *cab;
	NoLista *cau;
} Lista;

void CriarLista(Lista *p) {
	p->cab = (NoLista *) malloc(sizeof(NoLista));
	p->cau = (NoLista *) malloc(sizeof(NoLista));

	p->cab = p->cau;
	p->cau = NULL;
}

int EstaVazia(Lista *p) {
	return (p->cab == p->cau);
}

void InserirNoInicio(Lista *p, int valor) {
	NoLista *novono = (NoLista *) malloc(sizeof(NoLista));

	if (novono == NULL) {
		printf("NC#o foi possivel alocar espaC'o");
	}
	else {
		novono->info = valor;
		novono->prox = p->cab->prox;
		p->cab->prox = novono;
	}
}

void InserirNoFim(Lista *p, int valor) {
	NoLista *novono = (NoLista *) malloc(sizeof(NoLista));

	if (novono == NULL) {
		printf("NC#o foi possivel alocar espaC'o");
	}
	else {
		p->cau->info = valor;
		p->cau->prox = novono;
		novono->prox = NULL;
		p->cau= novono;
	}
}

void inserirOrdenadamenteCrescente(Lista *p, int valor) {
	NoLista *novono = (NoLista *) malloc(sizeof(NoLista));
	NoLista *anterior = p->cab;
	NoLista *no;

	if(novono == NULL) {
		printf("NC#o foi possC-vel alocar espaC'o.");
	}

	else {
		for(no = p->cab->prox; no != p->cau && no->info < valor; no = no->prox) {
			anterior = no;
		}

		novono->info = valor;
		novono->prox = anterior->prox;
		anterior->prox = novono;
	}

}

void inserirOrdenadamenteDecrescente(Lista *p, int valor) {
	NoLista *novono = (NoLista *) malloc(sizeof(NoLista));
	NoLista *anterior = p->cab;
	NoLista *no;

	if(novono == NULL) {
		printf("NC#o foi possC-vel alocar espaC'o.");
	}

	else {
		for(no = p->cab->prox; no != p->cau && no->info > valor; no = no->prox) {
			anterior = no;
		}

		novono->info = valor;
		novono->prox = anterior->prox;
		anterior->prox = novono;
	}

}

void ImprimirLista(Lista *p) {
	for(NoLista *no = p->cab->prox; no != p->cau; no = no->prox) {
		printf("%d ", no->info);
	}
}

void RemoverElemento(Lista *p, int valor) {
	NoLista *anterior = p->cab;
	NoLista *no;

	for (no = p->cab->prox; no != p->cau && no->info != valor; no = no->prox) {
		anterior = no;
	}

	if(no == p->cau) { // Ou seja, chegamos no fim da lista e nC#o achamos o valor para remover
		printf("\nElemento nC#o encontrado.\n");
	}
	else {
		anterior->prox = no->prox;
		free(no);
		printf("\nElemento Removido.\n");
	}
}

void liberarLista(Lista *p) {
	for(NoLista *no = p->cab->prox;  no != p->cau; no = no->prox) {
		p->cab->prox = no->prox;
		free(no);
	}
}

NoLista* buscaElemento(Lista *p, int valor) {
	for(NoLista *no = p->cab->prox; no != p->cau; no = no->prox) {
		if(no->info == valor) {
			return no;
		}
	}
}

NoLista* ultimo(Lista *p) {
	for(NoLista *no = p->cab->prox; no != p->cau; no = no->prox) {
		if(no->prox == p->cau) {
			return no;
		}
	}
}

int ultimovalor(Lista *p) {
	for(NoLista *no = p->cab->prox; no != p->cau; no = no->prox) {
		if(no->prox == p->cau) {
			return no->info;
		}
	}
}

int quantidadeElementos(Lista *p) {
	int qnt = 0;
	for(NoLista *no = p->cab->prox; no != p->cau; no = no->prox) {
		qnt += 1;
	}
	return qnt;
}

int maior(Lista *p) {
	int maior = p->cab->prox->info;

	for(NoLista *no = p->cab->prox; no != p->cau; no = no->prox) {
		if (no->info > maior) {
			maior = no->info;
		}
	}
	return maior;
}

float media(Lista *p) {
	float soma = 0;
	int qnt = 0;

	for(NoLista *no = p->cab->prox; no != p->cau; no = no->prox) {
		soma += no->info;
		qnt += 1;
	}

	return (float) soma / qnt;
}

Lista* concatena(Lista *p, Lista *p2) {
	if (EstaVazia(p) == 1) {
		p->cab->prox = p2->cab->prox;
		p->cau = p2->cau;
		return p;
	}
	else if(EstaVazia(p2) == 1) {
		return p;
	}
	else {
		p->cau->prox = p2->cab->prox;
		p->cau = p2->cau;
		return p;
	}
}

/*

copiarLista() //copio toda a lista

inverterLista() //inverter a ordem dos nC3s

comparaLista() //diz se sao iguais

infoMaisFrequente() //mostra valor que mais apareceu

retornarImpares() //vou percorrer uma lista e criar uma nova so com os elementos impares dela e retornar ela



concatenar() //junto duas listas

dividirEmDuas() //divido uma lista em duas

*/

void imprimeRec(Lista *p) {
    if(p->cab->prox == p->cau) {
		return;
	}
	else {
		printf("%d ", p->cab->prox->info);
		imprimeRec(p->cab->prox);
	}
}


void main() {
	Lista lista;

	// Criando Lista
	CriarLista(&lista);

	// Inserindo elementos
	inserirOrdenadamenteDecrescente(&lista, 1);
	inserirOrdenadamenteDecrescente(&lista, 5);
	inserirOrdenadamenteDecrescente(&lista, 2);

	// Vendo Lista
	imprimeRec(&lista);

	// Valor procurado: 1
	printf("\nO endereço de 1: %p", buscaElemento(&lista, 1));

	// Ultimo elemento
	printf("\nO endereço do último elemento: %p", ultimo(&lista));

	// Ultimo valor
	printf("\nO último valor: %d", ultimovalor(&lista));

	// Quantidade
	printf("\nA lista tem %d elementos", quantidadeElementos(&lista));

	// Maior
	printf("\nO maior elemento da lista: %d\n", maior(&lista));

	// Criando outra lista para concatenar
	
	// Criando Lista
	Lista lista2;
	
	CriarLista(&lista2);
	// Inserindo elementos
	inserirOrdenadamenteDecrescente(&lista2, 7);
	inserirOrdenadamenteDecrescente(&lista2, 5);
	inserirOrdenadamenteDecrescente(&lista2, 3);
	
	ImprimirLista(&lista2);
	
	concatena(&lista, &lista2);
	
    ImprimirLista(&lista);
}